global !p
#texMathZones = ['mkdMath','texMathZoneY','texMathZoneX', 'texMathZoneZ']
#vim.command('redir @a | silent exe "syntax list @texMathZones" | redir END')
#texMathZones = [x.strip() for x in vim.eval('@a').split(',')][1:]
texMathZones = ['mkdMath', 'texMathZoneV', 'texMathZoneW', 'texMathZoneX', 'texMathZoneY', 'texMathZoneZ', 'texMathZoneA', 'texMathZoneAS', 'texMathZoneB', 'texMathZoneBS', 'texMathZoneC', 'texMathZoneCS', 'texMathZoneD', 'texMathZoneDS']

#mkdMath, texMathZoneY, texMathZoneX
#744, 668, 667
#423 html H4

#texIgnoreMathZones = ['texMathText','texMathMatcher', 'texStatement']
# texIgnoreMathZones is for '\text{}', '\tag{}'part
texIgnoreMathZones = ['texMathText', 'texStatement']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

#ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	#try:
	#	first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
	#	return first != ignore
	#except StopIteration:
	#	return False
	for i in reversed(synstackids):
		if i in texIgnoreMathZoneIds:
			return False
	for i in reversed(synstackids):
		if i in texMathZoneIds:
			return True
	return False

def noarc(matchgroup,snappet):
	exception = ['arc','\\','var']
	if not (match in exception):
		snip.rv = match.group(matchgroup) + snappet
# seems I can use context for all, to ignore \xxx
#context "math()"
#priority 10
#snippet '([^\\]|^)cos' "cosine" riA
#`!p noarc(1,'\\cos')`
#endsnippet
endglobal



context "math()"
snippet it "italic" wA
\mathcal{$1}$0
endsnippet

context "math()"
snippet bb "bold" iA
\bold{$1}$0
endsnippet

context "math()"
priority 100
snippet ... "ldots" iA
\ldots
endsnippet

# The w at the end of the first line means that this snip­pet will ex­pand at word bound­aries
#snippet mk "Math" wA
#$${1}$`!p
#if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
#    snip.rv = ' '
#else:
#    snip.rv = ''
#`$2
#endsnippet
snippet mk "Math" wA
$$1$$0
endsnippet

snippet dm "Math" wA
$$
$0
$$
endsnippet

# subscript
context "math()"
#snippet '([A-Za-z])([\d])' "auto subscript" wrA
snippet '([A-Za-df-z])([\d])' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
#snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
snippet '([A-Za-df-z])_(\d\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([ab])([ij])' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet td "subscript" iA
_{$2}$0
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

priority 1
context "math()"
snippet at "|_{}" wA
|_{$1}$0
endsnippet

# superscript
context "math()"
snippet '([A-Za-z0-9])\*' "auto subscript" wr
`!p snip.rv = match.group(1)`^*
endsnippet
context "math()"
snippet '([A-Za-z0-9])([+-])' "auto subscript" wr
`!p snip.rv = match.group(1)`^`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

priority 10
context "math()"
snippet tp "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet ^^ "superscript" iA
^{$2}$0
endsnippet

context "math()"
snippet 'e([\d])' "time 10^" wrA
\\times 10^`!p snip.rv = match.group(1)`
endsnippet
context "math()"
snippet '10\^(\d\d)' "time 10^{}" wrA
10^{`!p snip.rv = match.group(1)`}
endsnippet
context "math()"
snippet 'e-(\d)' "time 10^{-1}" wrA
\\times 10^{-`!p snip.rv = match.group(1)`$1}$0
endsnippet

context "math()"
snippet deg "degree" iA
^\\circ
endsnippet

context "math()"
snippet her "hermitian" iA
^\\dag
endsnippet


context "math()"
snippet sq "sqrt" iA
\sqrt{$1}$0
endsnippet

# fraction
context "math()"
snippet /// "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# //	→	\frac{}{}
# alphabetic/alphabetic

# 3/	→	\frac{3}{}
# 4\pi^2/	→	\frac{4\pi^2}{}
# digits\alphabetic^_/

# (1 + 2 + 3)/	→	\frac{1 + 2 + 3}{}
# (1+(2+3)/)	→	(1 + \frac{2+3}{})
# (1 + (2+3))/	→	\frac{1 + (2+3)}{}
# detect ()by depth, in +, out -, till 0
context "math()"
#snippet '((\d+\.\d+)|(\d+)|(\d*)(\\)([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet
#  
#  # ^ start of line
#  # . any except <cr>
#  
priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# seclect, <C-n>, /
context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

#  # box
#  snippet box "Box"
#  `!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
#  │ $1 │
#  `!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
#  $0
#  endsnippet

#Postfix
#priority 100
#context "math()"
#snippet hba "Dirac" iA
#\hbar
#endsnippet
#priority 1000
#context "math()"
#snippet \hbar "Dirac" iA
#hbar 
#endsnippet
#
#priority 100
#context "math()"
#snippet hbar "Dirac" iA
#\hbar
#endsnippet

context "math()"
priority 10
snippet '([^\\]|^)hba' "Dirac hbar" riA
`!p noarc(1,'\\hbar')`
endsnippet

priority 10
context "math()"
snippet bra "bra" iA
⟨$1∣$0
endsnippet
#\bra{$1}$0
priority 10
context "math()"
snippet ket "ket" iA
∣$1⟩$0
endsnippet
#\ket{$1}$0
#\left|  \right>
priority 10
context "math()"
snippet bkt "braket" iA
⟨$1⟩$0
endsnippet
priority 100
context "math()"
snippet bkkt "braket" iA
⟨$1|$2|$3⟩$0
endsnippet
context "math()"
snippet kbt "braket" iA
|$1⟩⟨$2|$0
endsnippet

priority 100
context "math()"
snippet pket "psiket" iA
∣\psi⟩
endsnippet
priority 100
context "math()"
snippet pbra "psibra" iA
⟨\psi∣
endsnippet

context "math()"
snippet aa "Ångström" i
Å
endsnippet

#priority 10
#context "math()"
#snippet "bar" "bar" riA
#\overline{$1}$0
#endsnippet
context "math()"
priority 10
snippet '([^\\^h]|^)bar' "bar" riA
`!p noarc(1,'\\overline')`{$1}$0
endsnippet


priority 100
context "math()"
snippet "([a-gi-zA-GI-Z])Bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet vec "vec" iA
\vec{$1}
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])vec" "vec" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "til" "tilde" riA
\tilde{$1}$0
endsnippet
priority 100
context "math()"
snippet "([a-zA-Z])til" "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet
priority 101
context "math()"
snippet "wtil" "hat" riA
\widetilde{$1}$0
endsnippet
priority 102
context "math()"
snippet "([a-zA-Z])wtil" "hat" riA
\widetilde{`!p snip.rv=match.group(1)`}
endsnippet


priority 10
context "math()"
snippet oo "infity" iA
\infty
endsnippet

#snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" rA
#\vec{`!p snip.rv=match.group(1)`}
#endsnippet 

priority 100
context "math()"
snippet to "to" iA
 \to 
endsnippet

priority 100
context "math()"
snippet lim "limit" wA
\lim$0
endsnippet
priority 101
context "math()"
snippet \lim "limit" wA
lim $0
endsnippet

priority 100
context "math()"
snippet \limo "limit" wA
\lim_{$1 \to \infty}$0
endsnippet
priority 100
snippet \limz "limit" wA
\lim_{$1 \to 0}$0
endsnippet

priority 100
context "math()"
snippet sum "sum" wA
\sum$0
endsnippet
priority 101
context "math()"
snippet \sum "sum" wA
sum 
endsnippet

priority 100
context "math()"
snippet \sumo "sum" wA
\sum_{${1:n}}^{${2:\infty}}$0
endsnippet

priority 100
context "math()"
snippet int "intergate" wA
\int
endsnippet
# backspace get 'int ', backspace again '\int'
priority 101
context "math()"
snippet \int "intergate" wA
int 
endsnippet
priority 10000
context "math()"
snippet iint "intergate" wA
\iint
endsnippet

#some notation
priority 10
context "math()"
snippet max "max" wA
\max
endsnippet
priority 100
context "math()"
snippet \max "max" wA
max 
endsnippet

priority 10
context "math()"
snippet min "min" wA
\min
endsnippet
priority 100
context "math()"
snippet \min "min" wA
min 
endsnippet

priority 10
context "math()"
snippet exp "exp" wA
\exp
endsnippet
priority 11
context "math()"
snippet \exp "exp" wA
exp 
endsnippet


# to
priority 1000 
context "math()"
snippet into "intergateoo" wA
int_{${1:-\\infty}}^{${2:+\\infty}}$0
endsnippet
#  
context "math()"
snippet ode "differential" wA
\frac{d${1:y}}{d${2:x}} $0
endsnippet

priority 10
context "math()"
snippet pde "differential" wA
\frac{\partial ${1:y}}{ \partial ${2:x}} $0
endsnippet
context "math()"
priority 100
snippet 2pde "differential" wA
\frac{\partial^2 ${1:y}}{ \partial ${2:x_i}^2} $0
endsnippet
context "math()"
priority 1000
snippet 22pde "differential" wA
\frac{\partial^2 ${1:y}}{ \partial ${2:x_i} \partial ${3:x_j}} $0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])dot" "dot" rA
\dot{`!p snip.rv=match.group(1)`}$0
endsnippet

priority 1000
context "math()"
snippet "([a-zA-Z])ddot" "dot" rA
\dot{`!p snip.rv=match.group(1)`}$0
endsnippet
priority 1000
context "math()"
snippet ddot "ddot" iA
\ddot{$1}$0
endsnippet

priority 100
context "math()"
snippet dot "cdot" wA
\cdot 
endsnippet

priority 100
context "math()"
snippet ** "times" iA
 \times 
endsnippet

priority 1000
context "math()"
snippet otimes "otimes" iA
 \otimes 
endsnippet

#=====
context "math()"
snippet alp "alpha" iA
\alpha
endsnippet

#context "math()"
#snippet bet "beta" iA
#\beta
#endsnippet
#priority 1000
#context "math()"
#snippet \beta "beta" iA
#beta 
#endsnippet
#priority 100
#context "math()"
#snippet beta "beta" iA
#\beta
#endsnippet
context "math()"
priority 10
snippet '([^\\]|^)bet' "beta" riA
`!p noarc(1,'\\beta')`
endsnippet

context "math()"
snippet gam "gamma" iA
\gamma$0
endsnippet
context "math()"
snippet Gam "Gamma" iA
\Gamma
endsnippet

context "math()"
snippet ome "omega" iA
\omega
endsnippet
context "math()"
snippet Ome "Omega" iA
\Omega
endsnippet

context "math()"
snippet the "theta" iA
\theta
endsnippet
context "math()"
snippet The "Theta" iA
\Theta
endsnippet

#priority 1000
#context "math()"
#snippet \Theta "Theta" iA
#Theta 
#endsnippet
#priority 100
#context "math()"
#snippet Theta "Theta" iA
#\Theta
#endsnippet
#priority 100
#context "math()"
#snippet \theta "theta" iA
#theta 
#endsnippet
#priority 100
#context "math()"
#snippet theta "theta" iA
#\theta
#endsnippet

#eta
priority 1000
context "math()"
snippet zeta "zeta" iA
\zeta
endsnippet
priority 1000
context "math()"
snippet Zeta "zeta" iA
\Zeta
endsnippet

#priority 100
#context "math()"
#snippet psi "psi" iA
#\psi
#endsnippet
#priority 100
#context "math()"
#snippet Psi "Psi" iA
#\Psi
#endsnippet
#priority 1000
#context "math()"
#snippet \psi "psi" iA
#psi 
#endsnippet
#priority 1000
#context "math()"
#snippet \Psi "Psi" iA
#Psi 
#endsnippet
context "math()"
priority 10
snippet '([^\\]|^)([Pp])si' "psi" riA
`!p noarc(1,'\\' + match.group(2)+'si')`
endsnippet



#priority 10
#context "math()"
#snippet phi "phi" iA
#\phi
#endsnippet
#priority 100
#context "math()"
#snippet \phi "phi" iA
#phi 
#endsnippet
#context "math()"
#priority 10
#snippet Phi "Phi" iA
#\Phi
#endsnippet
#context "math()"
#priority 100
#snippet \Phi "Phi" iA
#Phi 
#endsnippet
context "math()"
priority 10
snippet '([^\\]|^)([Pp])hi' "phi" riA
`!p noarc(1,'\\' + match.group(2)+'hi')`
endsnippet

#context "math()"
#priority 100
#snippet vphi "varphi" iA
#\varphi
#endsnippet
#context "math()"
#priority 100
#snippet varphi "varphi" iA
#\varphi
#endsnippet
#context "math()"
#priority 1000
#snippet \varphi "varphi" iA
#varphi 
#endsnippet
context "math()"
priority 10
snippet '([^\\]|^)var([Pp])hi' "varphi" riA
`!p noarc(1,'\\var' + match.group(2)+'hi')`
endsnippet


context "math()"
snippet eps "epsilon" iA
\epsilon
endsnippet

context "math()"
snippet kap "kappa" iA
\kappa
endsnippet

#context "math()"
#priority 100
#snippet mu "mu" iA
#\mu
#endsnippet
#context "math()"
#priority 101
#snippet \mu "mu" iA
#mu 
#endsnippet
context "math()"
priority 10
snippet '([^\\]|^)mu' "mu" riA
`!p noarc(1,'\\mu')`
endsnippet

context "math()"
snippet lam "lambda" iA
\lambda
endsnippet

context "math()"
snippet sig "sigma" iA
\sigma
endsnippet

context "math()"
snippet del "delta" iA
\delta
endsnippet

context "math()"
snippet Del "Delta" iA
\Delta
endsnippet

context "math()"
snippet nab "nabla" iA
\nabla
endsnippet

#priority 10
#context "math()"
#snippet rho "rho" iA
#\rho
#endsnippet
#priority 100
#context "math()"
#snippet \rho "rho" iA
#rho 
#endsnippet
context "math()"
priority 10
snippet '([^\\]|^)rho' "rho" riA
`!p noarc(1,'\\rho')`
endsnippet

#priority 10
#context "math()"
#snippet xi "xi" iA
#\xi
#endsnippet
#priority 100
#context "math()"
#snippet \xi "xi" iA
#xi 
#endsnippet
context "math()"
priority 10
snippet '([^\\]|^)xi' "xi" riA
`!p noarc(1,'\\xi')`
endsnippet

#context "math()"
#snippet Xi "Xi" iA
#\Xi
#endsnippet

#priority 10
#context "math()"
#snippet eta "eta" iA
#\eta
#endsnippet
#priority 100
#context "math()"
#snippet \eta "eta" iA
#eta 
#endsnippet
context "math()"
priority 10
snippet '([^\\]|^)eta' "eta" riA
`!p noarc(1,'\\eta')`
endsnippet

#context "math()"
#priority 100
#snippet pi "pi" iA
#\pi
#endsnippet
#context "math()"
#priority 101
#snippet \pi "pi" iA
#pi 
#endsnippet
context "math()"
priority 10
snippet '([^\\]|^)pi' "pi" riA
`!p noarc(1,'\\pi')`
endsnippet

context "math()"
priority 10
snippet '([^\\]|^)([Cc])hi' "chi" riA
`!p noarc(1, '\\' + match.group(2) + 'hi')`
endsnippet

context "math()"
snippet Box "d'Alembertian" iA
\Box
endsnippet






context "math()"
snippet pm "+-" iA
\pm 
endsnippet

context "math()"
snippet mp "-+" iA
\mp 
endsnippet

#context "math()"
#priority 10
#snippet '([^\\]|^)sin' "sine" riA
#`!p snip.rv = match.group(1)`\\sin
#endsnippet
context "math()"
priority 10
snippet '([^\\]|^)sin' "sine" riA
`!p noarc(1,'\\sin')`
endsnippet
#context "math()"
#priority 10
#snippet '([\s\S])cos' "cosine" riA
#`!p
#if match.group(1) != '\\':
#	snip.rv = match.group(1)+'\\cos'
#else:
#	snip.rv = 'cos '
#`
#endsnippet

#context "math()"
#priority 10
#snippet '([^\\]|^)cos' "cosine" riA
#`!p snip.rv = match.group(1)`\\cos
#endsnippet
context "math()"
priority 10
snippet '([^\\]|^)cos' "cosine" riA
`!p noarc(1,'\\cos')`
endsnippet
context "math()"
priority 10
snippet '([^\\]|^)tan' "tangent" riA
`!p noarc(1,'\\tan')`
endsnippet

context "math()"
priority 10
snippet log "log" iA
\log
endsnippet
context "math()"
priority 10
snippet ln "ln" iA
\ln
endsnippet

context "math()"
priority 100
snippet asin "arcsine" iA
\arcsin
endsnippet

context "math()"
priority 100
snippet acos "arccosine" iA
\arccos
endsnippet
context "math()"
priority 100
snippet atan "arctangent" iA
\arctan
endsnippet

#context "math()"
#priority 101
#snippet \arcsin "arcsine" iA
#arcsin 
#endsnippet
#context "math()"
#priority 101
#snippet \arccos "arccosine" iA
#arccos 
#endsnippet
#context "math()"
#priority 101
#snippet \arctan "arctangent" iA
#arctan 
#endsnippet
#context "math()"
#priority 100
#snippet arcsin "arcsine" iA
#\arcsin 
#endsnippet
#context "math()"
#priority 100
#snippet arccos "arccosine" iA
#\arccos 
#endsnippet
#context "math()"
#priority 100
#snippet arctan "arctangent" iA
#\arctan 
#endsnippet

context "math()"
priority 10
snippet \log "log" iA
log 
endsnippet
context "math()"
priority 10
snippet \ln "ln" iA
ln 
endsnippet

#=====

context "math()"
snippet >= ">=" iA
\ge 
endsnippet

context "math()"
snippet <= "<=" iA
\le 
endsnippet

context "math()"
snippet << "<<" iA
\ll 
endsnippet

context "math()"
snippet >> ">>" iA
\gg 
endsnippet

context "math()"
snippet != "not equal" iA
\neq 
endsnippet
context "math()"
snippet => "=>" iA
\Rightarrow 
endsnippet
context "math()"
snippet =< "<=" iA
\Rightarrow 
endsnippet

context "math()"
snippet ~ "approximation" iA
\approx 
endsnippet

context "math()"
snippet == "def" iA
\equiv 
endsnippet

context "math()"
snippet prop "propto" iA
\propto 
endsnippet

context "math()"
snippet perp "perpendicular" iA
\perp
endsnippet

priority 1
context "math()"
snippet in "in" i
\in
endsnippet
# ===matrix
#context "math()"
#snippet case "cases" wA
#\left\\{\begin{matrix}
#$1&, $2\\\\
#$3&, $4 
#\end{matrix}\right.
#endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
${1:exp} &\text{ if } ${2:x}=$3 \\\\
${4:exp} &\text{ if } $2=$5 \\\\
\end{cases}
endsnippet

priority 100
context "math()"
snippet matp "matrix" wA
\begin{pmatrix}
$0\\\\
\end{pmatrix}
endsnippet

context "math()"
snippet matb "matrix" wA
\begin{bmatrix}
$0\\\\
\end{bmatrix}
endsnippet

context "math()"
snippet matl "matrix determined" wA
\begin{vmatrix}
$0\\\\
\end{vmatrix}
endsnippet

context "math()"
snippet ali "aligned" wA
\begin{aligned}
\end{aligned}
endsnippet

priority 1000
context "math()"
snippet bgbra "big bracket" wA
\left\\{\begin{matrix}
$0\\\\
\end{matrix}\right.
endsnippet

#context "math()"
#snippet "left(\[\]|\(\)|\{\})" "left right" wrA
#\left`!p snip.rv = match.string[1]` $1\right`!p snip.rv = match.string[-1]`$0
#endsnippet
#`!p snip.rv = match.group(1)`\right
context "math()"
snippet leftd "left right" wA
\left|$1\right|$0
endsnippet

# tp
priority 1000
context "math()"
snippet leftp "left right" iA
\left($1\right)$0
endsnippet

context "math()"
snippet leftb "left right" wA
\left[$1\right]$0
endsnippet
context "math()"
snippet leftc "left right" wA
\left{$1\right}$0
endsnippet
context "math()"
snippet left. "left right" wA
\left. \right|
endsnippet
context "math()"
snippet lefta "left right" wA
\left<$1\right>$0
endsnippet

context "math()"
snippet "\t" "tab" ri
	&=
endsnippet

#context "math()"
#snippet "\r" "return" irA
#\\\\
#endsnippet
context "math()"
snippet '([^\\]|^)tex' "text" riA
`!p noarc(1,'\\text')`{$1}$0
endsnippet

context "math()"
snippet tag "tag" wA
\tag{$1}$0
endsnippet

snippet pic "pictures"
![$1](./figure/$1.png)
endsnippet

snippet merm "mermaid" b
\`\`\`mermaid
graph LR
%%TB
%%A[长方形] -- 链接 --> B((圆))
%%A --> C(圆角长方形)
%%B --> D{菱形}
%%C --> D
\`\`\`
endsnippet
snippet code "code blocks" b

\`\`\`$1
$2
\`\`\`

$0
endsnippet

snippet lk "link" wA
[$1]($2) $0
endsnippet

snippet h1 "head" bA
# $0
endsnippet
snippet h2 "head" bA
## $0
endsnippet
snippet h3 "head" bA
### $0
endsnippet
snippet h4 "head" bA
#### $0
endsnippet
snippet h5 "head" bA
##### $0
endsnippet
snippet h6 "head" bA
###### $0
endsnippet

snippet line "line" b
--- $0
endsnippet
snippet tsk "task" bA
- [ ] $1
$0
endsnippet

snippet arrow "arrow" b
:arrow_forward: 
endsnippet

snippet comment "comment" b
<!--
$1
-->
$0
endsnippet

context "math()"
priority 10
snippet '([uU])a' "uparrow" riA
\\`!p snip.rv=match.group(1)`parrow
endsnippet
context "math()"
priority 10
snippet '([dD])a' "uparrow" riA
\\`!p snip.rv=match.group(1)`ownarrow
endsnippet
context "math()"
priority 10
snippet '([rR])a' "uparrow" ri
\\`!p snip.rv=match.group(1)`ightarrow
endsnippet
context "math()"
priority 10
snippet '([ll])a' "uparrow" ri
\\`!p snip.rv=match.group(1)`eftarrow
endsnippet


#\hat{ttttt}
#\widehat{tttttt}
#\overline{tttt}
#\widetilde{ttttttt}

# Tem

snippet cc "c60 qm" wA
$C_{60}$
endsnippet



