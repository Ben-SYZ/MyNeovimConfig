global !p
#texMathZones = ['mkdMath','texMathZoneY','texMathZoneX', 'texMathZoneZ']
#vim.command('redir @a | silent exe "syntax list @texMathZones" | redir END')
#texMathZones = [x.strip() for x in vim.eval('@a').split(',')][1:]
texMathZones = ['mkdMath', 'texMathZoneV', 'texMathZoneW', 'texMathZoneX', 'texMathZoneY', 'texMathZoneZ', 'texMathZoneA', 'texMathZoneAS', 'texMathZoneB', 'texMathZoneBS', 'texMathZoneC', 'texMathZoneCS', 'texMathZoneD', 'texMathZoneDS']

#mkdMath, texMathZoneY, texMathZoneX
#744, 668, 667
#423 html H4

#texIgnoreMathZones = ['texMathText','texMathMatcher', 'texStatement']
# texIgnoreMathZones is for '\text{}', '\tag{}'part
#texIgnoreMathZones = ['texMathText', 'texStatement']
texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

#ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	#try:
	#	first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
	#	return first != ignore
	#except StopIteration:
	#	return False
	for i in reversed(synstackids):
		if i in texIgnoreMathZoneIds:
			return False
	for i in reversed(synstackids):
		if i in texMathZoneIds:
			return True
	return False

def greek(left):
	return match.group(1) + '\\' + match.group(2) + left
def nobackslash(snappet):
	return match.group(1) + '\\' + snappet

endglobal

context "math()"
snippet it "italic" wA
\mathcal{$1}$0
endsnippet

context "math()"
snippet bb "bold" iA
\bold{$1}$0
endsnippet

context "math()"
priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet mk "Math" wA
$$1$$0
endsnippet

snippet dm "Math" wA
$$
$0
$$
endsnippet

# subscript
#==================
context "math()"
#snippet '([A-Za-z])([\d])' "auto subscript" wrA
snippet '([A-Za-df-z])([\d])' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
#snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
snippet '([A-Za-df-z])_(\d\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '([ab])([ij])' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet td "subscript" iA
_{$2}$0
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

priority 1
context "math()"
snippet at "|_{}" wA
|_{$1}$0
endsnippet

# superscript
#==================
context "math()"
snippet '([A-Za-z0-9])\*' "auto subscript" wr
`!p snip.rv = match.group(1)`^*
endsnippet
context "math()"
snippet '([A-Za-z0-9])([+-])' "auto subscript" wr
`!p snip.rv = match.group(1)`^`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

priority 10
context "math()"
snippet tp "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet ^^ "superscript" iA
^{$2}$0
endsnippet

context "math()"
snippet 'e([\d])' "time 10^" wrA
\\times 10^`!p snip.rv = match.group(1)`
endsnippet
context "math()"
snippet '10\^(\d\d)' "time 10^{}" wrA
10^{`!p snip.rv = match.group(1)`}
endsnippet
context "math()"
snippet 'e-(\d)' "time 10^{-1}" wrA
\\times 10^{-`!p snip.rv = match.group(1)`$1}$0
endsnippet

# fraction
context "math()"
snippet /// "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet
#  
#  # ^ start of line
#  # . any except <cr>
#  
priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

#  # box
#  snippet box "Box"
#  `!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
#  │ $1 │
#  `!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
#  $0
#  endsnippet

context "math()"
priority 10
snippet '([^\\]|^)hba' "Dirac hbar" riA
`!p snip.rv = nobackslash('hbar')`
endsnippet

priority 10
context "math()"
snippet bra "bra" iA
⟨$1∣$0
endsnippet
priority 10
context "math()"
snippet ket "ket" iA
∣$1⟩$0
endsnippet
#\ket{$1}$0
#\left|  \right>
priority 10
context "math()"
snippet bkt "braket" iA
⟨$1⟩$0
endsnippet
priority 100
context "math()"
snippet bkkt "braket" iA
⟨$1|$2|$3⟩$0
endsnippet
context "math()"
snippet kbt "braket" iA
|$1⟩⟨$2|$0
endsnippet

priority 100
context "math()"
snippet pket "psiket" iA
∣\psi⟩
endsnippet
priority 100
context "math()"
snippet pbra "psibra" iA
⟨\psi∣
endsnippet

# overline
context "math()"
snippet aa "Ångström" i
Å
endsnippet

context "math()"
priority 10
snippet '([^\\h]|^)bar' "bar" riA
\\`!p snip.rv = match.group(1)`overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-gi-zA-Z])bar" "bar" riA
\\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "([^\\]|^)hat" "hat" riA
\\`!p snip.rv = match.group(1)`hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet '([^\\]|^)vec' "vec" riA
\\`!p snip.rv = match.group(1)`vec{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])vec" "vec" riA
\\vec{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "([^\\|^])til" "tilde" riA
\\`!p snip.rv = match.group(1)`tilde{$1}$0
endsnippet
priority 100
context "math()"
snippet "([a-zA-Z])til" "tilde" riA
\\tilde{`!p snip.rv=match.group(1)`}
endsnippet
priority 101
context "math()"
snippet "wtil" "tilde" riA
\\widetilde{$1}$0
endsnippet
priority 102
context "math()"
snippet "([a-zA-Z])wtil" "tilde" riA
\\widetilde{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "([a-b-d-zA-Z])dot" "dot" rA
\dot{`!p snip.rv=match.group(1)`}$0
endsnippet

priority 1000
context "math()"
snippet "([a-zA-Z])ddot" "ddot" rA
\ddot{`!p snip.rv=match.group(1)`}$0
endsnippet
priority 1000
context "math()"
snippet '([^\\]|^)ddot' "ddot" riA
\\`!p snip.rv = match.group(1)`ddot{$1}$0
endsnippet


#===== lim sum int
#=================
priority 10
context "math()"
snippet '([^\\]|^)lim' "limit" rwA
\\lim$0
endsnippet
priority 10
context "math()"
snippet \limo "limit" wA
\\lim_{$1 \to ${2:\infty}}$0
endsnippet

priority 10
context "math()"
snippet '([^\\]|^)sum' "sum" rwA
`!p snip.rv = nobackslash('sum')`
endsnippet
priority 10
context "math()"
snippet \sumo "sum" wA
\\sum_{${1:n}}^{${2:\infty}}$0
endsnippet

priority 10
context "math()"
snippet '([^\\i]|^)int' "integrate" rwA
\\int
endsnippet
priority 10
context "math()"
snippet \into "integrateoo" wA
\\int_{${1:-\\infty}}^{${2:+\\infty}}$0
endsnippet
priority 10
context "math()"
snippet '([^\\]|^)iint' "integrate" rwA
`!p snip.rv = nobackslash('iint')`
endsnippet
priority 10
context "math()"
snippet \limo "limit" wA
\\lim_{$1 \to ${2:\infty}}$0
endsnippet

context "math()"
snippet ode "differential" wA
\frac{d${1:y}}{d${2:x}} $0
endsnippet

priority 10
context "math()"
snippet pde "differential" wA
\frac{\partial ${1:y}}{ \partial ${2:x}} $0
endsnippet
context "math()"
priority 100
snippet 2pde "differential" wA
\frac{\partial^2 ${1:y}}{ \partial ${2:x_i}^2} $0
endsnippet
context "math()"
priority 1000
snippet 22pde "differential" wA
\frac{\partial^2 ${1:y}}{ \partial ${2:x_i} \partial ${3:x_j}} $0
endsnippet

priority 100
context "math()"
snippet dot "cdot" wA
\cdot 
endsnippet

#===== Greek
#=================
context "math()"
snippet '([^\\]|^)([Aa])lp' "alpha" riA
`!p snip.rv = greek('lpha')`
endsnippet
context "math()"
snippet '([^\\]|^)([Bb])et' "beta" riA
`!p snip.rv = greek('eta')`
endsnippet
context "math()"
snippet '([^\\]|^)([Gg])am' "gamma" riA
`!p snip.rv = greek('amma')`
endsnippet
context "math()"
snippet '([^\\]|^)([Dd])el' "delta" riA
`!p snip.rv = greek('elta')`
endsnippet
context "math()"
snippet '([^\\]|^)([Ee])ps' "epsilon" riA
`!p snip.rv = greek('psilon')`
endsnippet
context "math()"
snippet '([^\\]|^)([Zz])et' "zeta" riA
`!p snip.rv = greek('eta')`
endsnippet
context "math()"
snippet '([^\\BbZzh]|^)([Ee])ta' "eta" riA
`!p snip.rv = greek('ta')`
endsnippet
context "math()"
snippet '([^\\]|^)([Tt])he' "theta" riA
`!p snip.rv = greek('heta')`
endsnippet
context "math()"
snippet '([^\\]|^)([Ii])ot' "iota" riA
`!p snip.rv = greek('ota')`
endsnippet
context "math()"
snippet '([^\\]|^)([Kk])ap' "kappa" riA
`!p snip.rv = greek('appa')`
endsnippet
context "math()"
snippet '([^\\]|^)([Mm])u' "mu" riA
`!p snip.rv = greek('u')`
endsnippet
context "math()"
snippet '([^\\]|^)([Nn])u' "nu" riA
`!p snip.rv = greek('u')`
endsnippet
context "math()"
snippet '([^\\]|^)([Xx])i' "xi" riA
`!p snip.rv = greek('i')`
endsnippet
context "math()"
snippet '([^\\]|^)([Oo])mi' "omicron" riA
`!p snip.rv = greek('micron')`
endsnippet
context "math()"
snippet '([^\\]|^)([Pp])i' "pi" riA
`!p snip.rv = greek('i')`
endsnippet
context "math()"
snippet '([^\\]|^)([Rr])ho' "rho" riA
`!p snip.rv = greek('ho')`
endsnippet
context "math()"
snippet '([^\\]|^)([Ss])ig' "sigma" riA
`!p snip.rv = greek('igma')`
endsnippet
context "math()"
snippet '([^\\]|^)([Tt])au' "tau" riA
`!p snip.rv = greek('au')`
endsnippet
context "math()"
snippet '([^\\]|^)([Uu])ps' "upsilon" riA
`!p snip.rv = greek('psilon')`
endsnippet
priority 10
context "math()"
snippet '([^\\r]|^)([Pp])hi' "phi" riA
`!p snip.rv = greek('hi')`
endsnippet
context "math()"
snippet '([^\\]|^)([Cc])hi' "chi" riA
`!p snip.rv = greek('hi')`
endsnippet
context "math()"
snippet '([^\\]|^)([Pp])si' "psi" riA
`!p snip.rv = greek('si')`
endsnippet
context "math()"
snippet '([^\\]|^)([Oo])me' "omega" riA
`!p snip.rv = greek('mega')`
endsnippet

priority 100
context "math()"
snippet 'v([Pp])hi' "varphi" riA
\\var`!p snip.rv =match.group(1)`hi
endsnippet


# some math notation
priority 10
context "math()"
snippet oo "infity" iA
\\infty
endsnippet

priority 10
context "math()"
snippet '([^\\]|^)to' "to" riA
`!p snip.rv = nobackslash('to')`
endsnippet

priority 10
context "math()"
snippet '([^\\]|^)max' "max" rwA
`!p snip.rv = nobackslash('max')`
endsnippet
priority 10
context "math()"
snippet '([^\\]|^)min' "min" rwA
`!p snip.rv = nobackslash('min')`
endsnippet

priority 10
context "math()"
snippet '([^\\]|^)exp' "exp" rwA
`!p snip.rv = nobackslash('exp')`
endsnippet

context "math()"
priority 10
snippet '([^\\]|^)log' "log" riA
`!p snip.rv = nobackslash('log')`
endsnippet
context "math()"
priority 10
snippet '([^\\]|^)log' "ln" riA
`!p snip.rv = nobackslash('ln')`
endsnippet

priority 100
context "math()"
snippet ** "times" iA
 \times 
endsnippet

priority 1000
context "math()"
snippet '([^\\]|^)ot' "otimes" riA
`!p snip.rv = nobackslash('otimes')`
endsnippet

context "math()"
snippet '([^\\]|^)nab' "nabla" riA
`!p snip.rv = nobackslash('nabla')`
endsnippet

context "math()"
snippet '([^\\]|^)Box' "d'Alembertian" riA
`!p snip.rv = nobackslash('Box')`
endsnippet

context "math()"
snippet deg "degree" iA
^\\circ
endsnippet

context "math()"
snippet her "hermitian" iA
^\\dag
endsnippet

context "math()"
snippet '([^\\]|^)sq' "sqrt" riA
\\`!p snip.rv = match.group(1)`sqrt{$1}$0
endsnippet




context "math()"
snippet '([^\\]|^)pm' "+-" riA
`!p snip.rv = nobackslash('pm')`
endsnippet

context "math()"
snippet '([^\\]|^)mp' "+-" riA
`!p snip.rv = nobackslash('mp')`
endsnippet

# trigonometric function
#===========
context "math()"
priority 10
snippet '([^\\c]|^)cos' "cosine" riA
`!p snip.rv = nobackslash('cos')`
endsnippet
context "math()"
priority 10
snippet '([^\\c]|^)sin' "sine" riA
`!p snip.rv = nobackslash('sin')`
endsnippet
context "math()"
priority 10
snippet '([^\\c]|^)tan' "tangent" riA
`!p snip.rv = nobackslash('tan')`
endsnippet


context "math()"
priority 100
snippet asin "arcsine" iA
\arcsin
endsnippet
context "math()"
priority 100
snippet acos "arccosine" iA
\arccos
endsnippet
context "math()"
priority 100
snippet atan "arctangent" iA
\arctan
endsnippet

# comparison
#===========
context "math()"
snippet >= ">=" iA
\ge 
endsnippet
context "math()"
snippet <= "<=" iA
\le 
endsnippet
context "math()"
snippet << "<<" iA
\ll 
endsnippet
context "math()"
snippet >> ">>" iA
\gg 
endsnippet
context "math()"
snippet != "not equal" iA
\neq 
endsnippet
context "math()"
snippet ~ "approximation" iA
\approx 
endsnippet
context "math()"
snippet == "def" iA
\equiv 
endsnippet
context "math()"
snippet prop "propto" iA
\propto 
endsnippet
context "math()"
snippet perp "perpendicular" iA
\perp
endsnippet

priority 1
context "math()"
snippet in "in" i
\in
endsnippet


#===== arrow
#=================
context "math()"
priority 10
snippet '([uU])a' "uparrow" riA
\\`!p snip.rv=match.group(1)`parrow
endsnippet
context "math()"
priority 10
snippet '([dD])a' "uparrow" riA
\\`!p snip.rv=match.group(1)`ownarrow
endsnippet
context "math()"
priority 10
snippet '([rR])a' "uparrow" ri
\\`!p snip.rv=match.group(1)`ightarrow
endsnippet
context "math()"
priority 10
snippet '([ll])a' "uparrow" ri
\\`!p snip.rv=match.group(1)`eftarrow
endsnippet
context "math()"
snippet => "=>" iA
\Rightarrow 
endsnippet
context "math()"
snippet =< "<=" iA
\Rightarrow 
endsnippet


#===== large notation
#=================
context "math()"
snippet case "cases" wA
\begin{cases}
${1:exp} &\text{ if } ${2:x}=$3 \\\\
${4:exp} &\text{ if } $2=$5 \\\\
\end{cases}
endsnippet

priority 100
context "math()"
snippet matp "matrix" wA
\begin{pmatrix}
$0\\\\
\end{pmatrix}
endsnippet

context "math()"
snippet matb "matrix" wA
\begin{bmatrix}
$0\\\\
\end{bmatrix}
endsnippet

context "math()"
snippet matl "matrix determined" wA
\begin{vmatrix}
$0\\\\
\end{vmatrix}
endsnippet

context "math()"
snippet ali "aligned" wA
\begin{aligned}
\end{aligned}
endsnippet

priority 1000
context "math()"
snippet bgbra "big bracket" wA
\left\\{\begin{matrix}
$0\\\\
\end{matrix}\right.
endsnippet


#===== large bracket
#=================
context "math()"
snippet leftd "left right" wA
\left|$1\right|$0
endsnippet

# tp
priority 1000
context "math()"
snippet leftp "left right" iA
\left($1\right)$0
endsnippet

context "math()"
snippet leftb "left right" wA
\left[$1\right]$0
endsnippet
context "math()"
snippet leftc "left right" wA
\left{$1\right}$0
endsnippet
context "math()"
snippet left. "left right" wA
\left. \right|
endsnippet
context "math()"
snippet lefta "left right" wA
\left<$1\right>$0
endsnippet

context "math()"
snippet "\t" "tab" ri
	&=
endsnippet

context "math()"
snippet '([^\\]|^)tex' "text" riA
\\`!p snip.rv = match.group(1)`text{$1}$0
endsnippet

context "math()"
snippet '([^\\]|^)tag' "tag" rwA
\\`!p snip.rv = match.group(1)`tag{$1}$0
endsnippet

snippet pic "pictures"
![$1](./figure/$1.png)
endsnippet

snippet merm "mermaid" b
\`\`\`mermaid
graph LR
%%TB
%%A[长方形] -- 链接 --> B((圆))
%%A --> C(圆角长方形)
%%B --> D{菱形}
%%C --> D
\`\`\`
endsnippet
snippet c "code blocks" b
\`\`\`$1
$2
\`\`\`
$0
endsnippet
snippet cp "code blocks" b
\`\`\`python
$1
\`\`\`
$0
endsnippet
snippet cx "code blocks of xml" b
\`\`\`xml
$1
\`\`\`
$0
endsnippet

snippet lk "link" wA
[$1]($2) $0
endsnippet

snippet h1 "head" bA
# $0
endsnippet
snippet h2 "head" bA
## $0
endsnippet
snippet h3 "head" bA
### $0
endsnippet
snippet h4 "head" bA
#### $0
endsnippet
snippet h5 "head" bA
##### $0
endsnippet
snippet h6 "head" bA
###### $0
endsnippet

snippet tsk "task" bA
- [ ] $1
$0
endsnippet

snippet arrow "arrow" b
:arrow_forward: 
endsnippet

snippet comment "comment" b
<!--
$1
-->
$0
endsnippet
