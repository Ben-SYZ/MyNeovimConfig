global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

#==================
#snippet template "Basic template" b
#\documentclass[a4paper]{article}
#
#\usepackage[utf8]{inputenc}
#\usepackage[T1]{fontenc}
#\usepackage{textcomp}
#\usepackage[dutch]{babel}
#\usepackage{amsmath, amssymb}
#
#
#% figure support
#\usepackage{import}
#\usepackage{xifthen}
#\pdfminorversion=7
#\usepackage{pdfpages}
#\usepackage{transparent}
#\newcommand{\incfig}[1]{%
#	\def\svgwidth{\columnwidth}
#	\import{./figures/}{#1.pdf_tex}
#}
#
#\pdfsuppresswarningpagegroup=1
#
#\begin{document}
#	$0
#\end{document}
#endsnippet

snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage{ctex}
\usepackage{braket}

\begin{document}
	$0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet sec "section" bA
\section{$1}
$0
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

priority 100
context "math()"
snippet "matrix" "matrix" riA
\begin{pmatrix}
% a & b\\
$1 \\
$2
\end{pmatrix}
$0
endsnippet


#\cdot: for englist
priority 100
snippet cdot "cdot" iA
$\cdot $$0
endsnippet

priority 100
snippet ** "blod" iA
\textbf{$1}$0
endsnippet


priority 100
snippet ... "ldots" iA
\ldots
endsnippet

# The w at the end of the first line means that this snip­pet will ex­pand at word bound­aries
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

# subscript
context "math()"
snippet '([A-Za-z])([\d,+,-])' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet td "subscript" iA
{$1}_{$2}$0
endsnippet

context "math()"
snippet _ "subscript" iA
_{$1}$0
endsnippet

# superscript
context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet tp "superscript" iA
{$1}^{$2}$0
endsnippet

context "math()"
snippet sq "sqrt" iA
\sqrt{$1}$0
endsnippet

# fraction
context "math()"
snippet /// "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# //	→	\frac{}{}
# alphabetic/alphabetic

# 3/	→	\frac{3}{}
# 4\pi^2/	→	\frac{4\pi^2}{}
# digits\alphabetic^_/

# (1 + 2 + 3)/	→	\frac{1 + 2 + 3}{}
# (1+(2+3)/)	→	(1 + \frac{2+3}{})
# (1 + (2+3))/	→	\frac{1 + (2+3)}{}
# detect ()by depth, in +, out -, till 0
context "math()"
snippet '((\d+)|(\d*)(\\)([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

# ^ start of line
# . any except <cr>

priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

## seclect, <C-n>, /
#context "math()"
#snippet / "Fraction" iA
#\\frac{${VISUAL}}{$1}$0
#endsnippet

# box
snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

#Postfix
snippet vec "vec" iA
\vec{$1}
endsnippet

priority 100
snippet hBar "Dirac" iA
\hbar
endsnippet

context "math()"
snippet bra "bra" iA
\bra{$1}$0
endsnippet

context "math()"
snippet ket "ket" iA
\ket{$1}$0
endsnippet

context "math()"
snippet bkt "braket" iA
\braket{$1|$2|$3}$0
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

#snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
#\vec{`!p snip.rv=match.group(1)`}
#endsnippet 

priority 100
context "math()"
snippet "to" "to" riA
\to
endsnippet

priority 100
context "math()"
snippet "limi" "limit" riA
\lim_{$1 \to \infty}$0
endsnippet
priority 100
snippet "limz" "limit" riA
\lim_{$1 \to 0}$0
endsnippet

priority 100
context "math()"
snippet "sum" "sum" riA
\sum_{$1}^{$2}$0
endsnippet

priority 100
context "math()"
snippet "int" "intergate" riA
\int
endsnippet

context "math()"
snippet "ode" "differential" riA
\frac{dy}{dx} = $0
endsnippet

context "math()"
snippet "pde" "differential" riA
\frac{\partial y}{ \partial x} = $0
endsnippet

priority 100
snippet "([a-zA-Z])dot" "dot" riA
\dot{`!p snip.rv=match.group(1)`}$0
endsnippet

priority 1000
snippet "([a-zA-Z])ddot" "dot" riA
\dot{`!p snip.rv=match.group(1)`}$0
endsnippet

#=====
# snippet "\alp" "alpha" riA
# \alpha $0
# endsnippet

context "math()"
snippet "gam" "gamma" riA
#\gamma$0
endsnippet

context "math()"
snippet "psi" "psi" riA
\psi$0
endsnippet

context "math()"
snippet "phi" "phi" riA
\phi$0
endsnippet

context "math()"
snippet "eps" "epsilon" riA
\epsilon$0
endsnippet

context "math()"
snippet "del" "delta" riA
\delta$0
endsnippet

context "math()"
snippet "Del" "Delta" riA
\Delta$0
endsnippet

context "math()"
snippet "pm" "+-" riA
\pm 
endsnippet

context "math()"
snippet "mp" "-+" riA
\mp 
endsnippet

context "math()"
snippet "sin" "sine" riA
\sin
endsnippet
context "math()"
snippet "cos" "cosine" riA
\cos
endsnippet
#=====

snippet >= ">=" iA
\ge $0
endsnippet

snippet <= "<=" iA
\le $0
endsnippet

snippet != "not equal" iA
\neq $0
endsnippet

snippet ~ "approximation" iA
\approx
endsnippet

snippet "==" "def" iA
\eqivalent $0
endsnippet

# ===matrix
context "math()"
snippet "case" "cases" wA
\begin{cases}
$0
\end{cases}
endsnippet



