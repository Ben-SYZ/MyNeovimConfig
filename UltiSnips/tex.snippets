snippet #beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

# The w at the end of the first line means that this snip­pet will ex­pand at word bound­aries
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

# subscript
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet td "superscript" iA
{$1}_{$2}$0
endsnippet

# superscript
snippet sr "^2" iA
^2
endsnippet

snippet cb "^3" iA
^3
endsnippet

snippet tp "superscript" iA
{$1}^{$2}$0
endsnippet

# fraction
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# //	→	\frac{}{}
# alphabetic/alphabetic

# 3/	→	\frac{3}{}
# 4\pi^2/	→	\frac{4\pi^2}{}
# digits\alphabetic^_/

# (1 + 2 + 3)/	→	\frac{1 + 2 + 3}{}
# (1+(2+3)/)	→	(1 + \frac{2+3}{})
# (1 + (2+3))/	→	\frac{1 + (2+3)}{}
# detect ()by depth, in +, out -, till 0
snippet '((\d+)|(\d*)(\\)([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

# ^ start of line
# . any except <cr>

priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# seclect, <C-n>, /
snippet / "Fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

# box
snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

#Postfix
snippet vec "vec" iA
\vec{$1}
endsnippet

priority 100
snippet hBar "Dirac" iA
\hbar
endsnippet

priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet 

snippet "to" "to" riA
\to
endsnippet

snippet "limi" "limit" riA
\lim{$1 \to \infty}$0
endsnippet
snippet "limz" "limit" riA
\lim{$1 \to 0}$0
endsnippet

snippet "int" "intergate" riA
\int
endsnippet


priority 100
snippet "([a-zA-Z])dot" "dot" riA
\dot{`!p snip.rv=match.group(1)`}$0
endsnippet

priority 1000
snippet "([a-zA-Z])ddot" "dot" riA
\dot{`!p snip.rv=match.group(1)`}$0
endsnippet

#=====
# snippet "\alp" "alpha" riA
# \alpha $0
# endsnippet

# coflict
#snippet "\gam" "gamma" riA
#\gamma $0
#endsnippet

#=====

snippet ">=" ">=" riA
\ge $0
endsnippet

snippet "<=" "<=" riA
\le $0
endsnippet

snippet "!=" "not equal" riA
\neq $0
endsnippet

snippet "app" "approximation" riA
\approx
endsnippet

snippet "==" "def" riA
\eqivalent $0
endsnippet

# ===matrix
snippet "case" "cases" wA
\begin{cases}
$0
\end{cases}
endsnippet



